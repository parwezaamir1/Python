Object:-
    Object is an instance of the class. 

Methods:- 
    methods are special functions which are written inside a class.

Constructor:- 
    It is a special menthod which run itself when an object gets created 
    We can add configuration related code, we write code in constructor which 
               we don't want to give access to the object or user

     def __init__(self)

self:- 
    self refers to the object
    The self keyword is a special keyword in Python that represents the instance of the class.
    It is used to access the attributes and methods of the class. It is a convention and not a keyword. 
    It is the first parameter of the methods that represents the instance of the class.

Instance variable:-
    It is a kind of variable for which the value of the variable is differnt for 
     different object.
    All the attributes or variables are created inside the constructor are instance variable.
    eg. 
        pin, balance is different for evry customer

Static/class variable:-
    In Python, static (or class) variables are variables that are shared among 
    all instances (objects) of a class. 
    They are associated with the class itself rather than with instances of the class.
    These variables are defined within the class but outside of any method.

    ex.
     class MyClass:
    # Static variable (class variable)
    static_variable = 0

    def __init__(self, instance_variable):
        # Instance variable
        self.instance_variable = instance_variable
        # Accessing the static variable within the constructor
        MyClass.static_variable += 1

# Creating instances of MyClass
obj1 = MyClass("Instance 1")
obj2 = MyClass("Instance 2")
obj3 = MyClass("Instance 3")

# Accessing instance variables
print(obj1.instance_variable)  # Output: Instance 1
print(obj2.instance_variable)  # Output: Instance 2
print(obj3.instance_variable)  # Output: Instance 3

# Accessing the static variable through the class and instances
print(MyClass.static_variable)  # Output: 3
print(obj1.static_variable)     # Output: 3
print(obj2.static_variable)     # Output: 3
print(obj3.static_variable)     # Output: 3


    Static variables are accessed using the class name (MyClass.static_variable) or 
    through an instance (obj1.static_variable). 
    Any changes made to the static variable are reflected across all instances
    and the class itself.



Private attributes:-
    if we place __ before attributes or methods, that becomes Private

    eg.
    if a class Atm has attribute balance
    __balance becomes private and changes to 
          _Atm__balance 

Encapsulation:-
    It is the process of bundling data and the methods that work on that data together
     into a single unit. 
    Encapsulation is important because it helps to protect data from being 
    accidentally modified or corrupted. It also makes code more modular and reusable.

    In Python, encapsulation is achieved by using private attributes and public methods. 
    Private attributes are attribute or variable that can only be accessed by methods within the same class. 
    Public methods are methods that can be accessed by any code that has access to the object.
    To create a private attribute in Python, you simply need to prefix the variable name with double underscore (__). 
    
    For example, the following code creates a private variable called __name:

    class Person:
        def __init__(self, name):
            self.__name = name

        def get_name(self):
            return self.__name

Reference variable:-
    we create object of a Atm class 
        Atm()   ---- objects gets created but we cann't use it
        sbi = Atm()  --- here sbi acts as a Reference variable to store the object Atm

Relationship:-
    1. Aggregate
    When we have HAS-A relationship between two class called Aggregate
    eg- lets say we have two classes Customer and Address
        here, each customer object has-a relationship with Address

    2. Inheritance (IS-A relationship):-
        - Inheritance is in upward direction not upward to downward
        - We can inherit data member, methods and even constructor
        - Private members are not inherited

        Inheritance is a fundamental concept in object-oriented programming (OOP) that 
        allows a class (called the child or subclass) to inherit properties and behaviors 
        from another class (called the parent or superclass). 
        This concept promotes code reusability and helps create a hierarchy of classes.
    class ParentClass:
        # Attributes and methods of the parent class

    class ChildClass(ParentClass):
        # Additional attributes and methods specific to the child class

Polymorphism:-
    1. Method Overriding
    2. Method Overloading
    3. Operator Overloading





